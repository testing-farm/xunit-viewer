{"version":3,"sources":["app/logo.js","app/hero.js","app/parse.js","app/parse-all.js","app/toggle.js","app/reducer.js","app/suite.js","app/test-options.js","app/app.js","index.js","cli/parse.js"],"names":["src","className","width","height","alt","active","onClick","title","brand","require","parse","window","dispatch","files","suites","a","file","contents","parsed","merge","recursive","console","log","message","type","payload","onIcon","offIcon","onLabel","offLabel","disabled","onChange","toggleAllProperties","state","update","toggleType","suiteTesttoggleType","tests","Object","values","currentSuites","forEach","suite","properties","test","keys","length","name","id","fuzzy","value","toLowerCase","suitesExpanded","some","messages","visible","raw","entries","filter","key","concat","_active","_visible","propertiesExpanded","propertiesVisible","suitesEmpty","menuActive","suiteOptionsActive","testOptionsActive","propertiesOptionsActive","activeFiles","testToggles","status","passed","failure","error","skipped","unknown","all","expanded","prop","icons","statusRank","Properties","map","join","RawContent","index","PrettyContent","dangerouslySetInnerHTML","__html","PrettyIcon","CodeIcon","Test","time","classname","hasProperties","hasMessage","aria-hidden","Suite","systemOut","hasTests","containsSomething","sort","left","right","leftStatus","indexOf","rightStatus","leftName","rightName","Search","label","evt","target","placeholder","Total","count","total","icon","fromTestCounts","testCounts","EyeIcon","EyeSlashIcon","ChevronUpIcon","ChevronDownIcon","StatusTotal","ToggleRow","Options","App","useReducer","reducer","initialState","parseAll","testCount","testTotal","onUpdate","sockets","useEffect","io","on","LZUTF8","decompress","inputEncoding","ReactDOM","render","document","getElementById","xml2js","parseString","xml","Promise","resolve","reject","err","result","Error","hashCode","str","hash","i","charCodeAt","extractProperties","property","trim","push","meta","$","_","extractTests","output","testcases","testcase","class","clonedMeta","assign","body","is_","is$Message","is$Type","isString","extractTestMessages","testsuite","extractSuite","testsuites","Array","isArray","includes","extarctSuiteMeta","extractSystemOut","extract","module","exports"],"mappings":"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","file":"static/js/main.66f26a05.chunk.js","sourcesContent":["import React from 'react'\n\nexport default () => <img src='https://assets.gitlab-static.net/uploads/-/system/group/avatar/5515434/tft-logo.png' className='logo' width='64' height='64' alt='Testing Farm' />\n","import React from 'react'\nimport Logo from './logo'\n\nconst FilterIcon = () => <i className='fas fa-filter' />\n\nexport default ({ active, onClick, title, brand }) => <section className='hero is-black'>\n  <div className='container'>\n    <div className='columns is-mobile'>\n      {/*\n      <div className='column is-1'>\n          <button className='filter button has-text-white' onClick={onClick}>\n          <span><FilterIcon /> {!active ? 'FILTER' : 'CLOSE'}</span>\n        </button>\n      </div>\n      */}\n      <div className='column is-11'>\n        <div className='hero-center'>\n          {\n            brand !== null\n              ? <img className='brand' alt={title} src={brand} />\n              : <Logo />\n          }\n          <h1 className='title'>{title}</h1>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","require('../cli/parse')\nconst parse = window.parse\nexport default parse\n","import merge from 'merge'\nimport parse from './parse'\n\nexport default async (dispatch, files, suites) => {\n  for (const { file, contents } of files) {\n    try {\n      const parsed = await parse(contents)\n      suites = merge.recursive(true, suites, parsed)\n    } catch (err) {\n      console.log('Failed to parse', file, '\\n', err.message)\n    }\n  }\n  dispatch({\n    type: 'parse-suites',\n    payload: {\n      suites: suites.suites\n    }\n  })\n}\n","import React from 'react'\n\nexport default ({\n  active,\n  onIcon,\n  offIcon,\n  onLabel,\n  offLabel,\n  disabled = false,\n  onChange = () => {},\n  className = ''\n}) => {\n  return <button\n    onClick={() => {\n      onChange(!active)\n    }}\n    disabled={disabled}\n    className={`button toggle is-${active ? 'active' : 'inactive'} ${className}`}>\n    <div className='toggle-rail'>\n      <div className='toggle-handle' />\n    </div>\n    {active ? onIcon : offIcon}\n    <span>{active ? onLabel : offLabel}</span>\n  </button>\n}\n","import fuzzy from 'fuzzy'\nimport merge from 'merge'\n\nconst toggleAllProperties = (state, payload, update, toggleType, suiteTesttoggleType) => {\n  update[toggleType] = state[toggleType]\n  update[toggleType][payload.type] = payload.active\n\n  if (payload.type === 'all') {\n    update[toggleType].suites = payload.active\n    update[toggleType].tests = payload.active\n  }\n\n  if (payload.type === 'all' || payload.type === 'suites') {\n    Object.values(update.currentSuites).forEach(suite => {\n      suite.properties[suiteTesttoggleType] = payload.active\n    })\n  }\n\n  if (payload.type === 'all' || payload.type === 'tests') {\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if ('properties' in test) {\n          test.properties[suiteTesttoggleType] = payload.active\n        }\n      })\n    })\n  }\n  return update\n}\n\nexport default (state, { type, payload }) => {\n  let update = {}\n  update.currentSuites = state.currentSuites\n\n  if (type === 'parse-suites') {\n    state = merge.recursive(true, {}, state)\n    state.suites = payload.suites\n    state.currentSuites = payload.suites\n    Object.values(state.currentSuites).forEach(suite => {\n      if (Object.keys(suite.tests).length > 0 || Object.keys(suite.properties).length > 0) suite.active = true\n    })\n    return state\n  }\n\n  if (type === 'search-suites') {\n    Object.values(state.suites).forEach(({ name, id }) => {\n      if (fuzzy.test(payload.value.toLowerCase(), name.toLowerCase())) {\n        update.currentSuites[id] = update.currentSuites[id] || merge.recursive(true, {}, state.suites[id])\n        if (!('active' in update.currentSuites[id])) update.currentSuites[id].active = true\n      } else delete update.currentSuites[id]\n    })\n    update.suitesExpanded = Object.values(update.currentSuites).some(suite => suite.active === true)\n  }\n  if (type === 'search-tests') {\n    Object.values(state.suites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (!fuzzy.test(payload.value.toLowerCase(), test.name.toLowerCase()) && !test.messages.some(message => fuzzy.test(payload.value.toLowerCase(), message.toLowerCase()))) {\n          if (update.currentSuites[suite.id]) delete update.currentSuites[suite.id].tests[test.id]\n        } else if (suite.id in update.currentSuites && !(test.id in update.currentSuites[suite.id].tests)) {\n          if (update.currentSuites[suite.id]) {\n            update.currentSuites[suite.id].tests[test.id] = merge.recursive(true, {}, state.suites[suite.id].tests[test.id])\n            update.currentSuites[suite.id].tests[test.id].active = true\n            update.currentSuites[suite.id].tests[test.id].visible = true\n            update.currentSuites[suite.id].tests[test.id].raw = true\n          }\n        }\n      })\n    })\n  }\n  if (type === 'search-properties') {\n    Object.values(state.suites).forEach(suite => {\n      Object.entries(suite.properties)\n        .filter(([key]) => key !== '_visible' && key !== '_active')\n        .forEach(([key, values]) => {\n          values = values || []\n          if (!fuzzy.test(payload.value.toLowerCase(), key.toLowerCase()) && !values.some(value => fuzzy.test(payload.value.toLowerCase(), value.toLowerCase()))) delete update.currentSuites[suite.id].properties[key]\n          else if (suite.id in update.currentSuites && !(key in update.currentSuites[suite.id].properties)) {\n            if (update.currentSuites[suite.id]) {\n              update.currentSuites[suite.id].properties[key] = [].concat(state.suites[suite.id].properties[key])\n              update.currentSuites[suite.id].properties._active = true\n              update.currentSuites[suite.id].properties._visible = true\n              update.propertiesExpanded = false\n            }\n          }\n        })\n    })\n    update.propertiesExpanded = Object.values(update.currentSuites).some((suite) => {\n      return suite.properties._active || false\n    })\n    update.propertiesVisible = Object.values(update.currentSuites).some((suite) => {\n      return suite.properties._visible || false\n    })\n  }\n\n  if (type === 'toggle-all-suites') {\n    update.suitesExpanded = !state.suitesExpanded\n    Object.values(update.currentSuites).forEach(suite => { suite.active = update.suitesExpanded })\n  }\n  if (type === 'toggle-empty-suites') {\n    update.suitesEmpty = !state.suitesEmpty\n  }\n  if (type === 'toggle-menu') update.menuActive = !state.menuActive\n  if (type === 'toggle-suite-options') update.suiteOptionsActive = !state.suiteOptionsActive\n  if (type === 'toggle-test-options') update.testOptionsActive = !state.testOptionsActive\n  if (type === 'toggle-properties-options') update.propertiesOptionsActive = !state.propertiesOptionsActive\n  if (type === 'toggle-files') update.activeFiles = !state.activeFiles\n  if (type === 'toggle-suite') {\n    update.currentSuites[payload.id].active = payload.active\n    update.suitesExpanded = Object.values(update.currentSuites).some(suite => suite.active === true)\n  }\n\n  if (type === 'toggle-properties') {\n    if (typeof payload.test !== 'undefined' && payload.test !== null) {\n      update.currentSuites[payload.suite].tests[payload.test].properties._active = payload.active\n    } else {\n      update.currentSuites[payload.suite].properties._active = payload.active\n      update.propertiesExpanded = Object.values(update.currentSuites).some((suite) => {\n        return suite.properties._active || false\n      })\n    }\n  }\n\n  if (type === 'toggle-all-properties') {\n    update = toggleAllProperties(state, payload, update, 'propertiesExpanded', '_active')\n  }\n  if (type === 'toggle-properties-visbility') {\n    update = toggleAllProperties(state, payload, update, 'propertiesVisible', '_visible')\n  }\n\n  if (type === 'toggle-test') {\n    update.currentSuites[payload.suite].tests[payload.id].active = payload.active\n  }\n  if (type === 'toggle-test-mode') {\n    update.currentSuites[payload.suite].tests[payload.id].raw = payload.raw\n  }\n  if (type === 'toggle-test-visibility') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].visible = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.visible = payload.active\n        else if (payload.status === test.status) test.visible = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.visible = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.visible = payload.active\n      update.testToggles.failure.visible = payload.active\n      update.testToggles.error.visible = payload.active\n      update.testToggles.skipped.visible = payload.active\n      update.testToggles.unknown.visible = payload.active\n    } else {\n      if (update.testToggles.passed.visible ||\n            update.testToggles.failure.visible ||\n            update.testToggles.error.visible ||\n            update.testToggles.skipped.visible ||\n            update.testToggles.unknown.visible) update.testToggles.all.visible = true\n    }\n  }\n  if (type === 'toggle-test-expanded') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].expanded = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.active = payload.active\n        else if (payload.status === test.status) test.active = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.active = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.expanded = payload.active\n      update.testToggles.failure.expanded = payload.active\n      update.testToggles.error.expanded = payload.active\n      update.testToggles.skipped.expanded = payload.active\n      update.testToggles.unknown.expanded = payload.active\n    } else {\n      if (update.testToggles.passed.expanded ||\n            update.testToggles.failure.expanded ||\n            update.testToggles.error.expanded ||\n            update.testToggles.skipped.expanded ||\n            update.testToggles.unknown.expanded) update.testToggles.all.expanded = true\n    }\n  }\n  if (type === 'toggle-test-raw') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].raw = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.raw = payload.active\n        else if (payload.status === test.status) test.raw = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.raw = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.raw = payload.active\n      update.testToggles.failure.raw = payload.active\n      update.testToggles.error.raw = payload.active\n      update.testToggles.skipped.raw = payload.active\n      update.testToggles.unknown.raw = payload.active\n    } else {\n      if (update.testToggles.passed.raw ||\n            update.testToggles.failure.raw ||\n            update.testToggles.error.raw ||\n            update.testToggles.skipped.raw ||\n            update.testToggles.unknown.raw) update.testToggles.all.raw = true\n    }\n  }\n\n  state = merge.recursive(true, state, update)\n\n  Object.values(state.currentSuites).forEach(suite => {\n    if (!state.suitesEmpty) suite._visible = true\n    else suite._visible = (Object.keys(suite.tests).length > 0 && Object.values(suite.tests).filter(test => test.visible).length > 0) || (suite.properties._visible && Object.keys(suite.properties).filter(prop => prop !== '_visible').length > 0)\n  })\n\n  return state\n}\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst icons = {\n  passed: 'check',\n  failure: 'times',\n  error: 'exclamation',\n  skipped: 'ban',\n  unknown: 'question'\n}\n\nconst statusRank = [\n  'failure',\n  'error',\n  'passed',\n  'skipped',\n  'unknown'\n]\n\nconst Properties = ({ properties, active = true, dispatch, suite, test = null }) => {\n  return <div className={`properties card is-${active ? 'active' : 'inactive'}`}>\n    <button className='card-header' onClick={() => { dispatch({ type: 'toggle-properties', payload: { suite, test, active: !active } }) }}>\n      <p className='card-header-title'>Properties</p>\n      <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span>\n    </button>\n    {active ? <div className='card-content'>\n      <table className='table'>\n        <thead>\n          <tr>\n            <th>Property</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(properties)\n            .filter(key => key !== '_active' && key !== '_visible')\n            .map(key => {\n              return <tr key={key}>\n                <td>{key}</td>\n                <td>{properties[key].join(', ')}</td>\n              </tr>\n            })}\n        </tbody>\n      </table>\n    </div> : null}\n  </div>\n}\n\nconst RawContent = ({ messages }) => <div className='raw-content'>\n  {messages.map((message, index) => <pre key={`test-message-${index}`}>{message}</pre>)}\n</div>\n\nconst PrettyContent = ({ messages }) => <div className='pretty-content'>\n  {messages.map((message, index) => <div key={`test-message-${index}`} dangerouslySetInnerHTML={{ __html: message }} />)}\n</div>\n\nconst PrettyIcon = () => <span className='icon'>\n  <i className='fas fa-star' />\n</span>\n\nconst CodeIcon = () => <span className='icon'>\n  <i className='fas fa-code' />\n</span>\n\nconst Test = ({ id, messages, status, time, classname, name, properties = {}, active = true, raw = true, dispatch, suite }) => {\n  const hasProperties = properties._visible & Object.keys(properties).filter(key => key !== '_active' && key !== '_visible').length > 0\n  const hasMessage = messages.length > 0\n  return <div className={`test card is-${active ? 'active' : 'inactive'} is-${status} is-${!hasMessage && !hasProperties ? 'empty' : 'populated'}`}>\n    <button className='card-header' onClick={() => { dispatch({ type: 'toggle-test', payload: { suite, id, active: !active } }) }} disabled={!hasMessage && !hasProperties}>\n      <p className='card-header-title'>\n        <span className='icon'>\n          <i className={`fas fa-${icons[status] || icons.unknown}`} aria-hidden='true' />\n        </span>\n        <span>{name}</span>\n        {classname ? <small>classname = {classname}</small> : null}\n        {time ? <small>time = {time}</small> : null}\n      </p>\n      {hasMessage || hasProperties ? <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span> : null}\n    </button>\n    <div className='content'>\n      {active && (hasMessage || hasProperties) ? <div className='card-content'>\n        {hasProperties ? <Properties properties={properties} suite={suite} test={id} dispatch={dispatch} active={properties._active} /> : null}\n        {\n          hasMessage\n            ? <>\n              <Toggle\n                active={raw}\n                onLabel='raw'\n                onIcon={<CodeIcon />}\n                offIcon={<PrettyIcon />}\n                offLabel='pretty'\n                onChange={() => dispatch({ type: 'toggle-test-mode', payload: { suite, id, raw: !raw } })} />\n              {\n                raw\n                  ? <RawContent messages={messages} />\n                  : <PrettyContent messages={messages} />\n              }\n            </>\n            : null\n        }\n      </div> : null}\n    </div>\n  </div>\n}\n\nconst SuiteCount = ({ count, type }) => count > 0 ? <span className='suite-count'>\n  <span className='icon'>\n    <i className={`fas fa-${icons[type]}`} aria-hidden='true' />\n  </span>\n  {count}\n</span> : null\n\nconst Suite = ({ visible, id, name, active = false, properties = {}, time, tests = {}, dispatch, systemOut = [] }) => {\n  let passed = 0\n  let failure = 0\n  let skipped = 0\n  let error = 0\n  let unknown = 0\n  Object.keys(tests).forEach(key => {\n    const status = tests[key].status\n    if (status === 'passed') passed += 1\n    else if (status === 'failure') failure += 1\n    else if (status === 'skipped') skipped += 1\n    else if (status === 'error') error += 1\n    else unknown += 1\n  })\n\n  const hasTests = Object.keys(tests).length > 0 && Object.values(tests).some(test => test.visible)\n  const hasProperties = '_visible' in properties && properties._visible && Object.keys(properties).filter(key => key !== '_active' && key !== '_visible').length > 0\n  const containsSomething = hasTests || hasProperties\n  return <div className={`card suite is-${active ? 'active' : 'inactive'} is-${containsSomething ? 'populated' : 'empty'} is-${visible ? 'visible' : 'hidden'}`}>\n    {/*\n    <button className='card-header' onClick={() => { if (containsSomething) dispatch({ type: 'toggle-suite', payload: { id, active: !active } }) }} disabled={!containsSomething}>\n      <p className='card-header-title'>\n        <span>{name}</span>\n        {time ? <small>time = {time}</small> : null}\n      </p>\n\n      {containsSomething ? <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span> : null}\n      {containsSomething ? <p className='suite-count-container'>\n        <SuiteCount type='failure' count={failure} />\n        <SuiteCount type='error' count={error} />\n        <SuiteCount type='passed' count={passed} />\n        <SuiteCount type='skipped' count={skipped} />\n        <SuiteCount type='unknown' count={unknown} />\n      </p> : null}\n    </button>\n    */}\n    {active && containsSomething ? <div className='card-content'>\n      <div className='content'>\n        {systemOut.length > 0 ? systemOut.map((value, index) => <pre key={`${id}-sysout-${index}`}>{value}</pre>) : null}\n        {hasProperties ? <Properties properties={properties} suite={id} dispatch={dispatch} active={properties._active} /> : null}\n        <div>\n          {\n            Object.entries(tests)\n              .filter(([key, test]) => test.visible)\n              .sort((left, right) => {\n                let leftStatus = statusRank.indexOf(left[1].status)\n                let rightStatus = statusRank.indexOf(right[1].status)\n\n                leftStatus = leftStatus === -1 ? statusRank.length : leftStatus\n                rightStatus = rightStatus === -1 ? statusRank.length : rightStatus\n\n                if (leftStatus < rightStatus) {\n                  return -2\n                }\n                if (leftStatus > rightStatus) return 2\n\n                const leftName = left[1].name\n                const rightName = right[1].name\n\n                if (leftName < rightName) return -1\n                if (leftName > rightName) return 1\n\n                return 0\n              })\n              .map(([key, test]) => <Test key={key} {...test} suite={id} dispatch={dispatch} />)\n          }\n        </div>\n      </div>\n    </div> : null}\n  </div>\n}\n\nexport default Suite\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst icons = {\n  passed: 'check',\n  failure: 'times',\n  error: 'exclamation',\n  skipped: 'ban',\n  unknown: 'question'\n}\n\nconst Search = ({ label, dispatch, suite, id }) => <div className='field options-search'>\n  <div className='control'>\n    <input\n      onChange={(evt) => {\n        dispatch({\n          type: 'search-tests',\n          payload: {\n            value: evt.target.value\n          }\n        })\n      }}\n      className='input'\n      type='text'\n      placeholder={label} />\n  </div>\n</div>\n\nconst Total = ({ count, total, icon }) => <div className='options-total'>\n  {icon\n    ? <span className='icon'>\n      <i className={`fas fa-${icons[icon] || icons.unknown}`} aria-hidden='true' />\n    </span>\n    : null}\n  <b>{count}</b><span>/{total}</span>\n</div>\n\nconst fromTestCounts = (testCounts, status, value) => {\n  const statusCounts = testCounts[status] || {}\n  return statusCounts[value] || 0\n}\n\nconst EyeIcon = () => <>\n  <span className='icon'>\n    <i className='fas fa-eye' />\n  </span>\n</>\n\nconst EyeSlashIcon = () => <>\n  <span className='icon'>\n    <i className='fas fa-eye-slash' />\n  </span>\n</>\n\nconst PrettyIcon = () => <span className='icon'>\n  <i className='fas fa-star' />\n</span>\n\nconst CodeIcon = () => <span className='icon'>\n  <i className='fas fa-code' />\n</span>\n\nconst ChevronUpIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-up' />\n</span>\n\nconst ChevronDownIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-down' />\n</span>\n\nconst StatusTotal = ({ testCounts, status }) => {\n  return fromTestCounts(testCounts, status, 'total') > 0 ? <Total count={fromTestCounts(testCounts, status, 'count')} total={fromTestCounts(testCounts, status, 'total')} icon={status} /> : null\n}\n\nconst ToggleRow = ({ status, label, dispatch, visible = true, expanded = true, raw = true }) => <div className='test-options-toggle-row'>\n  <div className='test-options-toggle-row-label'>\n    {status !== 'all'\n      ? <span className='icon'>\n        <i className={`fas fa-${icons[status] || icons.unknown}`} aria-hidden='true' />\n      </span>\n      : <span className='icon'>\n        <i className='far fa-circle' aria-hidden='true' />\n      </span>}\n    <span>{label}</span>\n  </div>\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-visibility',\n        payload: {\n          status,\n          active: !visible\n        }\n      })\n    }}\n    active={visible}\n    onLabel='Visible'\n    offLabel='Hidden'\n    onIcon={<EyeIcon />}\n    offIcon={<EyeSlashIcon />} />\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-expanded',\n        payload: {\n          status,\n          active: !expanded\n        }\n      })\n    }}\n    active={expanded}\n    onLabel='Expanded'\n    offLabel='Contracted'\n    onIcon={<ChevronDownIcon />}\n    offIcon={<ChevronUpIcon />} />\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-raw',\n        payload: {\n          status,\n          active: !raw\n        }\n      })\n    }}\n    active={raw}\n    onLabel='Raw'\n    offLabel='Pretty'\n    onIcon={<CodeIcon />}\n    offIcon={<PrettyIcon />} />\n\n</div>\n\nconst Options = ({\n  testCounts = {},\n  testToggles = {},\n  count = 0,\n  total = 0,\n  dispatch,\n  active = false\n}) => {\n  return <div className={`options card ${active ? 'is-active' : 'is-inactive'}`}>\n    <header className='card-header'>\n      <Search label='Filter tests' dispatch={dispatch} />\n      <button\n        onClick={() => dispatch({ type: 'toggle-test-options' })}\n        className='button card-header-icon'>\n        <div className='options-inputs'>\n          <Total count={count} total={total} />\n          <StatusTotal testCounts={testCounts} status='passed' />\n          <StatusTotal testCounts={testCounts} status='failure' />\n          <StatusTotal testCounts={testCounts} status='error' />\n          <StatusTotal testCounts={testCounts} status='skipped' />\n          <StatusTotal testCounts={testCounts} status='unknown' />\n        </div>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </button>\n    </header>\n    <div className='card-content options-toggles'>\n      {active\n        ? <>\n          <ToggleRow status='all' label='All' dispatch={dispatch} {...testToggles.all} />\n          <ToggleRow status='passed' label='Passed' dispatch={dispatch} {...testToggles.passed} />\n          <ToggleRow status='failure' label='Failure' dispatch={dispatch} {...testToggles.failure} />\n          <ToggleRow status='error' label='Error' dispatch={dispatch} {...testToggles.error} />\n          <ToggleRow status='skipped' label='Skipped' dispatch={dispatch} {...testToggles.skipped} />\n          <ToggleRow status='unknown' label='Unknown' dispatch={dispatch} {...testToggles.unknown} />\n        </>\n        : null}\n    </div>\n\n  </div>\n}\n\nexport default Options\n","import React, { useEffect, useReducer } from 'react'\nimport Files from './files'\nimport Hero from './hero'\nimport initialState from './initial-state.json'\nimport parseAll from './parse-all'\nimport PropertiesOptions from './properties-options'\nimport reducer from './reducer'\nimport Suite from './suite'\nimport SuiteOptions from './suite-options'\nimport TestOptions from './test-options'\n\nconst App = ({ files, title, brand }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  if (Object.keys(state.suites).length === 0) parseAll(dispatch, files, {})\n\n  let currentPropertiesCount = 0\n  let propertiesTotal = 0\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    currentPropertiesCount += Object.keys(suite.properties).filter(key => key !== '_active' && key !== '_visible').length\n    Object.values(suite.tests).forEach(test => {\n      if (test.properties) currentPropertiesCount += Object.keys(test.properties).filter(key => key !== '_active' && key !== '_visible').length\n    })\n  })\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    propertiesTotal += Object.keys(suite.properties).filter(key => key !== '_active' && key !== '_visible').length\n    Object.values(suite.tests).forEach(test => {\n      if (test.properties) propertiesTotal += Object.keys(test.properties).filter(key => key !== '_active' && key !== '_visible').length\n    })\n  })\n\n  const testCounts = {}\n  let testCount = 0\n  let testTotal = 0\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    Object.entries(suite.tests).forEach(([key, test]) => {\n      const status = test.status || 'unknown'\n      testCounts[status] = testCounts[status] || {}\n      testCounts[status].count = testCounts[status].count || 0\n      testCounts[status].total = testCounts[status].total || 0\n\n      testCounts[status].count += 1\n      testCounts[status].total += 1\n\n      testTotal += 1\n      testCount += 1\n    })\n  })\n\n  const onUpdate = ({ files }) => {\n    parseAll(dispatch, files, {})\n  }\n\n  window.sockets = window.sockets || null\n  useEffect(() => {\n    if (window.sockets === null && 'io' in window) {\n      window.sockets = window.io()\n      window.sockets.on('update', onUpdate)\n    }\n  })\n\n  return (\n    <div>\n      <Hero active={state.menuActive} onClick={() => { dispatch({ type: 'toggle-menu' }) }} title={title} brand={brand} />\n      <header className={`is-${!state.menuActive ? 'hidden' : 'shown'}`}>\n        <div className='container'>\n          {/*\n          <SuiteOptions\n            active={state.suiteOptionsActive}\n            suitesExpanded={state.suitesExpanded}\n            suitesEmpty={state.suitesEmpty}\n            dispatch={dispatch}\n            count={Object.keys(state.currentSuites).length}\n            total={Object.keys(state.suites).length}\n          />\n          */}\n          <TestOptions\n            active={state.testOptionsActive}\n            testToggles={state.testToggles}\n            testCounts={testCounts}\n            count={testCount}\n            total={testTotal}\n            dispatch={dispatch}\n          />\n          {/*\n          <PropertiesOptions\n            propertiesExpanded={state.propertiesExpanded}\n            propertiesVisible={state.propertiesVisible}\n            active={state.propertiesOptionsActive}\n            count={currentPropertiesCount}\n            total={propertiesTotal}\n            dispatch={dispatch}\n          />\n          */}\n          {process.env.NODE_ENV === 'development'\n            ? <Files files={files} active={state.activeFiles} setActive={() => { dispatch({ type: 'toggle-files' }) }} />\n            : null}\n        </div>\n      </header>\n      <main>\n        <div className='container'>\n          <div>\n            {\n              Object.values(state.currentSuites)\n                .sort((left, right) => {\n                  if (left.name < right.name) return -1\n                  if (left.name > right.name) return 1\n                  return 0\n                })\n                .map(suite => <Suite key={suite.id} {...suite} visible={suite._visible} dispatch={dispatch} />)\n            }\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bulma/css/bulma.css'\nimport '@fortawesome/fontawesome-free/js/all'\n\nimport './app/index.css'\nimport App from './app/app.js'\n\nimport LZUTF8 from 'lzutf8'\n\nlet files = window.files || []\nconst title = window.title || 'Xunit Viewer'\nconst brand = window.brand || null\n\nif (process.env.NODE_ENV === 'development') {\n  files = [{\n    file: '/path/to/file/complete.xml',\n    contents: LZUTF8.compress(`\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuite tests=\"1\" failures=\"1\" time=\"0.0160106\">\n  <testcase name=\"It Is A Failure\" classname=\"Failing\" time=\"0.012011200000000001\">\n    <error>Error message</error>\n    <system-out>Some messgae</system-out>\n    <failure type=\"Failure\">FILENAME:XX</failure>\n  </testcase>\n</testsuite>\n`, { outputEncoding: 'Base64' })\n  }]\n}\n\nfiles = files.map(({ file, contents }) => ({\n  file,\n  contents: LZUTF8.decompress(contents, { inputEncoding: 'Base64' })\n}))\n\nReactDOM.render(<App files={files} title={title} brand={brand} />, document.getElementById('root'))\n","const xml2js = require('xml2js')\n\nconst statusRank = [\n  'failure',\n  'error',\n  'passed',\n  'skipped',\n  'unknown'\n]\n\nconst parseString = (xml) => new Promise((resolve, reject) => {\n  xml2js.parseString(xml, (err, result) => {\n    if (err) reject(new Error(err))\n    else resolve(result)\n  })\n})\n\nconst hashCode = (str) => {\n  var hash = 0\n  if (str.length === 0) return hash\n  for (var i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i)\n    hash = ((hash << 5) - hash) + char\n    hash = hash & hash\n  }\n  return hash\n}\n\nconst extarctSuiteMeta = (output, testsuite) => {\n  const meta = testsuite.$ || {}\n  const name = meta.name || 'No Name'\n  const id = hashCode(name)\n  const suite = output.suites[id] || {}\n  suite.tests = suite.tests || {}\n  suite.systemOut = suite.systemOut || []\n  suite.properties = suite.properties || {\n    _visible: true\n  }\n\n  Object.entries(meta).forEach(([key, value]) => {\n    if (!['errors', 'failures', 'name', 'skipped', 'tests', 'time'].includes(key)) {\n      suite.properties[key] = suite.properties[key] || []\n      suite.properties[key].push(value)\n    }\n  })\n\n  suite.id = id\n  suite.name = name\n  suite.time = meta.time || 0\n  return suite\n}\n\nconst extractProperties = (suite, properties) => {\n  suite.properties = suite.properties || {}\n  suite.properties._visible = true\n  properties.forEach(property => {\n    if (typeof property === 'string') {\n      property = property.trim()\n      if (property !== '') {\n        suite.properties['No Name'] = suite.properties['No Name'] || []\n        suite.properties['No Name'].push(property)\n      }\n    } else {\n      property.property.forEach(property => {\n        const meta = property.$ || {}\n        const name = meta.name || 'No Name'\n        let value = meta.value || property._\n        if (typeof property === 'string') value = property\n        value = value || ''\n        value = value.trim()\n        suite.properties[name] = suite.properties[name] || []\n        if (value) {\n          suite.properties[name].push(value)\n        }\n      })\n    }\n  })\n}\n\nconst extractTestMessages = (test, messages) => {\n  messages.forEach(body => {\n    const is_ = typeof body._ === 'string'\n    const is$Message = typeof body.$ !== 'undefined' && ('message' in body.$)\n    const is$Type = typeof body.$ !== 'undefined' && ('type' in body.$)\n    const isString = typeof body === 'string'\n\n    if (is_) test.messages.push(body._.trim())\n    if (is$Message) test.messages.push(body.$.message.trim())\n    if (is$Type) test.messages.push(body.$.type.trim())\n    if (isString) test.messages.push(body.trim())\n  })\n}\n\nconst extractTests = (output, suite, testcases) => {\n  suite.tests = suite.tests || {}\n  testcases.forEach(testcase => {\n    const meta = testcase.$ || {}\n    const name = meta.name || 'No Name'\n    const classname = meta.classname || meta.class || ''\n    const time = meta.time || 0\n    const id = hashCode(name + classname)\n\n    const test = suite.tests[id] || { id, name, messages: [], visible: true }\n    test.time = time\n    test.classname = classname\n    if (typeof testcase === 'string') test.messages.push(testcase.trim())\n    if (testcase._) test.messages.push(testcase._.trim())\n    if (meta.message) test.messages.push(testcase.$.message.trim())\n    if (typeof testcase.properties !== 'undefined') {\n      extractProperties(test, testcase.properties)\n      delete testcase.properties\n    }\n    const clonedMeta = Object.assign({}, meta)\n    delete clonedMeta.time\n    delete clonedMeta.name\n    delete clonedMeta.classname\n    delete clonedMeta.class\n    delete clonedMeta.message\n    if (Object.keys(clonedMeta).length > 0) {\n      const property = []\n      for (const [name, value] of Object.entries(clonedMeta)) {\n        property.push({\n          $: {\n            name, value\n          }\n        })\n      }\n      extractProperties(test, [{ property }])\n    }\n\n    if (typeof testcase !== 'string') {\n      const keys = Object.keys(testcase).filter(key => key !== '$' && key !== '_' && key !== 'testcase')\n        .sort((left, right) => {\n          let leftStatus = statusRank.indexOf(left)\n          let rightStatus = statusRank.indexOf(right)\n          leftStatus = leftStatus === -1 ? statusRank.length : leftStatus\n          rightStatus = rightStatus === -1 ? statusRank.length : rightStatus\n\n          if (leftStatus < rightStatus) return -1\n          if (leftStatus > rightStatus) return 1\n          return 0\n        })\n      let status = keys[0]\n      keys.forEach((key) => {\n        if (key) extractTestMessages(test, testcase[key])\n      })\n      if (status === 'system-out') status = 'passed'\n      test.status = status || 'passed'\n    }\n\n    test.messages = test.messages.filter(message => message !== '')\n\n    suite.tests[id] = test\n    if (typeof testcase.testcase !== 'undefined') extractTests(output, suite, testcase.testcase)\n    if (typeof testcase.testsuite !== 'undefined') extractSuite(output, testcase.testsuite)\n  })\n}\n\nconst extractSystemOut = (suite, testsuite) => {\n  suite.systemOut = suite.systemOut || []\n  let systemOut = testsuite['system-out']\n  if (!Array.isArray(systemOut)) systemOut = [systemOut]\n  suite.systemOut = suite.systemOut.concat(systemOut)\n}\n\nconst extractSuite = (output, testsuites) => {\n  if (!Array.isArray(testsuites)) testsuites = [testsuites]\n  testsuites.forEach(testsuite => {\n    const suite = extarctSuiteMeta(output, testsuite)\n    if (typeof testsuite.properties !== 'undefined') extractProperties(suite, testsuite.properties)\n    if (typeof testsuite.testcase !== 'undefined') extractTests(output, suite, testsuite.testcase)\n    if (typeof testsuite['system-out'] !== 'undefined') extractSystemOut(suite, testsuite)\n    output.suites[suite.id] = suite\n  })\n}\n\nconst extract = (output, testsuites) => {\n  if (!Array.isArray(testsuites)) testsuites = [testsuites]\n  testsuites.forEach(testsuite => {\n    extractSuite(output, testsuite)\n    if (typeof testsuite.testsuite !== 'undefined') extract(output, testsuite.testsuite)\n  })\n}\n\nconst parse = async (xml) => {\n  const output = {\n    suites: {}\n  }\n  const result = await parseString(xml)\n  if (result.testsuites) {\n    const testsuites = result.testsuites.testsuite\n    extract(output, testsuites)\n  } else if (result.testsuite) {\n    extract(output, result.testsuite)\n  }\n\n  for (const value of Object.values(output.suites)) {\n    value._visible = Object.keys(value.tests).length > 0 || Object.keys(value.properties).filter(prop => prop !== '_visible').length > 0\n    value.systemOut = value.systemOut.map(value => value.trim())\n  }\n  return output\n}\n\nif (typeof window !== 'undefined') window.parse = parse\nelse {\n  module.exports = parse\n}\n"],"sourceRoot":""}